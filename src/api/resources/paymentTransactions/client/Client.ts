/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Belvo from "../../..";
import URLSearchParams from "@ungap/url-search-params";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace PaymentTransactions {
    interface Options {
        environment?: environments.BelvoEnvironment | string;
        credentials: core.Supplier<core.BasicAuth>;
    }
}

export class PaymentTransactions {
    constructor(protected readonly options: PaymentTransactions.Options) {}

    /**
     * @throws {Belvo.UnauthorizedError}
     */
    public async listPaymentTransactions(
        request: Belvo.ListPaymentTransactionsRequest = {}
    ): Promise<Belvo.PaymentsTransactionsPaginatedResponse> {
        const {
            page,
            idIn,
            createdAt,
            createdAtGt,
            createdAtGte,
            createdAtLt,
            createdAtLte,
            createdAtRange,
            charge,
            chargeIn,
            beneficiary,
            beneficiaryIn,
            payer,
            payerIn,
            transactionType,
            currency,
            description,
            amount,
            amountGt,
            amountGte,
            amountLt,
            amountLte,
            amountRange,
        } = request;
        const _queryParams = new URLSearchParams();
        if (page != null) {
            _queryParams.append("page", page.toString());
        }

        if (idIn != null) {
            _queryParams.append("id__in", idIn);
        }

        if (createdAt != null) {
            _queryParams.append("created_at", createdAt);
        }

        if (createdAtGt != null) {
            _queryParams.append("created_at__gt", createdAtGt);
        }

        if (createdAtGte != null) {
            _queryParams.append("created_at__gte", createdAtGte);
        }

        if (createdAtLt != null) {
            _queryParams.append("created_at__lt", createdAtLt);
        }

        if (createdAtLte != null) {
            _queryParams.append("created_at__lte", createdAtLte);
        }

        if (createdAtRange != null) {
            _queryParams.append("created_at__range", createdAtRange);
        }

        if (charge != null) {
            _queryParams.append("charge", charge);
        }

        if (chargeIn != null) {
            _queryParams.append("charge__in", chargeIn);
        }

        if (beneficiary != null) {
            _queryParams.append("beneficiary", beneficiary);
        }

        if (beneficiaryIn != null) {
            _queryParams.append("beneficiary__in", beneficiaryIn);
        }

        if (payer != null) {
            _queryParams.append("payer", payer);
        }

        if (payerIn != null) {
            _queryParams.append("payer__in", payerIn);
        }

        if (transactionType != null) {
            _queryParams.append("transaction__type", transactionType);
        }

        if (currency != null) {
            _queryParams.append("currency", currency);
        }

        if (description != null) {
            _queryParams.append("description", description);
        }

        if (amount != null) {
            _queryParams.append("amount", amount);
        }

        if (amountGt != null) {
            _queryParams.append("amount__gt", amountGt);
        }

        if (amountGte != null) {
            _queryParams.append("amount__gte", amountGte);
        }

        if (amountLt != null) {
            _queryParams.append("amount__lt", amountLt);
        }

        if (amountLte != null) {
            _queryParams.append("amount__lte", amountLte);
        }

        if (amountRange != null) {
            _queryParams.append("amount__range", amountRange);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.BelvoEnvironment.Production, "payments/transactions"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/belvo",
                "X-Fern-SDK-Version": "0.0.15",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.PaymentsTransactionsPaginatedResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Belvo.UnauthorizedError(
                        await serializers.UnauthorizedError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BelvoError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BelvoError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BelvoTimeoutError();
            case "unknown":
                throw new errors.BelvoError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {Belvo.UnauthorizedError}
     * @throws {Belvo.NotFoundError}
     */
    public async detailPaymentTransactions(id: string): Promise<Belvo.PaymentTransaction> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.BelvoEnvironment.Production,
                `payments/transactions/${id}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/belvo",
                "X-Fern-SDK-Version": "0.0.15",
            },
            contentType: "application/json",
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.PaymentTransaction.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Belvo.UnauthorizedError(
                        await serializers.UnauthorizedError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new Belvo.NotFoundError(
                        await serializers.NotFoundError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.BelvoError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BelvoError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BelvoTimeoutError();
            case "unknown":
                throw new errors.BelvoError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        const credentials = await core.Supplier.get(this.options.credentials);
        if (credentials != null) {
            return core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(credentials));
        }

        return undefined;
    }
}
