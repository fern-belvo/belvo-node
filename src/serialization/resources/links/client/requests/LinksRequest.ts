/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Belvo from "../../../../../api";
import * as core from "../../../../../core";

export const LinksRequest: core.serialization.Schema<
    serializers.LinksRequest.Raw,
    Omit<Belvo.LinksRequest, "omit" | "fields">
> = core.serialization.object({
    institution: core.serialization.string(),
    username: core.serialization.string(),
    password: core.serialization.string().optional(),
    externalId: core.serialization.property("external_id", core.serialization.string().optional()),
    username2: core.serialization.string().optional(),
    username3: core.serialization.string().optional(),
    password2: core.serialization.string().optional(),
    token: core.serialization.string().optional(),
    accessMode: core.serialization.property(
        "access_mode",
        core.serialization.lazy(async () => (await import("../../../..")).EnumLinkAccessModeRequest).optional()
    ),
    fetchHistorical: core.serialization.property("fetch_historical", core.serialization.boolean().optional()),
    credentialsStorage: core.serialization.property("credentials_storage", core.serialization.string().optional()),
    usernameType: core.serialization.property("username_type", core.serialization.string().optional()),
    certificate: core.serialization.string().optional(),
    privateKey: core.serialization.property("private_key", core.serialization.string().optional()),
});

export declare namespace LinksRequest {
    interface Raw {
        institution: string;
        username: string;
        password?: string | null;
        external_id?: string | null;
        username2?: string | null;
        username3?: string | null;
        password2?: string | null;
        token?: string | null;
        access_mode?: serializers.EnumLinkAccessModeRequest.Raw | null;
        fetch_historical?: boolean | null;
        credentials_storage?: string | null;
        username_type?: string | null;
        certificate?: string | null;
        private_key?: string | null;
    }
}
