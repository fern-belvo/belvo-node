/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Belvo from "../../api";
import * as core from "../../core";

export const Account: core.serialization.ObjectSchema<serializers.Account.Raw, Belvo.Account> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        link: core.serialization.string().optional(),
        institution: core.serialization.lazyObject(async () => (await import("..")).InstitutionAccount).optional(),
        collectedAt: core.serialization.property("collected_at", core.serialization.string()),
        createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
        category: core.serialization.lazy(async () => (await import("..")).EnumAccountCategory),
        balanceType: core.serialization.property("balance_type", core.serialization.string().optional()),
        type: core.serialization.string().optional(),
        name: core.serialization.string().optional(),
        number: core.serialization.string().optional(),
        balance: core.serialization.lazyObject(async () => (await import("..")).AccountsBalance),
        currency: core.serialization.string().optional(),
        publicIdentificationName: core.serialization.property(
            "public_identification_name",
            core.serialization.string().optional()
        ),
        publicIdentificationValue: core.serialization.property(
            "public_identification_value",
            core.serialization.string().optional()
        ),
        lastAccessedAt: core.serialization.property("last_accessed_at", core.serialization.string().optional()),
        creditData: core.serialization.property(
            "credit_data",
            core.serialization.lazyObject(async () => (await import("..")).AccountsCreditData)
        ),
        loanData: core.serialization.property(
            "loan_data",
            core.serialization.lazyObject(async () => (await import("..")).AccountsLoanData)
        ),
        fundsData: core.serialization.property(
            "funds_data",
            core.serialization
                .list(core.serialization.lazyObject(async () => (await import("..")).AccountsFundsData))
                .optional()
        ),
        receivablesData: core.serialization.property(
            "receivables_data",
            core.serialization.lazyObject(async () => (await import("..")).AccountsReceivablesData).optional()
        ),
        bankProductId: core.serialization.property("bank_product_id", core.serialization.string().optional()),
        internalIdentification: core.serialization.property(
            "internal_identification",
            core.serialization.string().optional()
        ),
    });

export declare namespace Account {
    interface Raw {
        id?: string | null;
        link?: string | null;
        institution?: serializers.InstitutionAccount.Raw | null;
        collected_at: string;
        created_at?: string | null;
        category?: serializers.EnumAccountCategory.Raw;
        balance_type?: string | null;
        type?: string | null;
        name?: string | null;
        number?: string | null;
        balance: serializers.AccountsBalance.Raw;
        currency?: string | null;
        public_identification_name?: string | null;
        public_identification_value?: string | null;
        last_accessed_at?: string | null;
        credit_data: serializers.AccountsCreditData.Raw;
        loan_data: serializers.AccountsLoanData.Raw;
        funds_data?: serializers.AccountsFundsData.Raw[] | null;
        receivables_data?: serializers.AccountsReceivablesData.Raw | null;
        bank_product_id?: string | null;
        internal_identification?: string | null;
    }
}
