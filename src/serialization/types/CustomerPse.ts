/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Belvo from "../../api";
import * as core from "../../core";

export const CustomerPse: core.serialization.ObjectSchema<serializers.CustomerPse.Raw, Belvo.CustomerPse> =
    core.serialization.object({
        id: core.serialization.string(),
        createdAt: core.serialization.property("created_at", core.serialization.string()),
        createdBy: core.serialization.property("created_by", core.serialization.string()),
        customerType: core.serialization.property(
            "customer_type",
            core.serialization.lazy(async () => (await import("..")).EnumCustomerType)
        ),
        name: core.serialization.string(),
        country: core.serialization.lazy(async () => (await import("..")).EnumPaymentsCountry),
        email: core.serialization.string(),
        identifier: core.serialization.string(),
        identifierType: core.serialization.property(
            "identifier_type",
            core.serialization.lazy(async () => (await import("..")).EnumCustomerIdentifierTypePse)
        ),
        address: core.serialization.string().optional(),
        phone: core.serialization.string().optional(),
    });

export declare namespace CustomerPse {
    interface Raw {
        id: string;
        created_at: string;
        created_by: string;
        customer_type: serializers.EnumCustomerType.Raw;
        name: string;
        country: serializers.EnumPaymentsCountry.Raw;
        email: string;
        identifier: string;
        identifier_type: serializers.EnumCustomerIdentifierTypePse.Raw;
        address?: string | null;
        phone?: string | null;
    }
}
