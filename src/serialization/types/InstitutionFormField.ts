/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Belvo from "../../api";
import * as core from "../../core";

export const InstitutionFormField: core.serialization.ObjectSchema<
    serializers.InstitutionFormField.Raw,
    Belvo.InstitutionFormField
> = core.serialization.object({
    name: core.serialization.string().optional(),
    type: core.serialization.string().optional(),
    label: core.serialization.string().optional(),
    validation: core.serialization.string().optional(),
    placeholder: core.serialization.string().optional(),
    validationMessage: core.serialization.property("validation_message", core.serialization.string().optional()),
    values: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).InstitutionsFormFieldValues))
        .optional(),
    length: core.serialization.number().optional(),
    optional: core.serialization.boolean().optional(),
});

export declare namespace InstitutionFormField {
    interface Raw {
        name?: string | null;
        type?: string | null;
        label?: string | null;
        validation?: string | null;
        placeholder?: string | null;
        validation_message?: string | null;
        values?: serializers.InstitutionsFormFieldValues.Raw[] | null;
        length?: number | null;
        optional?: boolean | null;
    }
}
