/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Belvo from "../../api";
import * as core from "../../core";

export const PaymentIntentPseLastError: core.serialization.Schema<
    serializers.PaymentIntentPseLastError.Raw,
    Belvo.PaymentIntentPseLastError
> = core.serialization.undiscriminatedUnion([
    core.serialization.lazyObject(async () => (await import("..")).LastErrorInvalidCredentials),
    core.serialization.lazyObject(async () => (await import("..")).LastErrorInvalidToken),
    core.serialization.lazyObject(async () => (await import("..")).LastErrorLoginError),
    core.serialization.lazyObject(async () => (await import("..")).LastErrorTwoFactor),
    core.serialization.lazyObject(async () => (await import("..")).LastErrorPaymentError),
    core.serialization.lazyObject(async () => (await import("..")).LastErrorSessionExpired),
]);

export declare namespace PaymentIntentPseLastError {
    type Raw =
        | serializers.LastErrorInvalidCredentials.Raw
        | serializers.LastErrorInvalidToken.Raw
        | serializers.LastErrorLoginError.Raw
        | serializers.LastErrorTwoFactor.Raw
        | serializers.LastErrorPaymentError.Raw
        | serializers.LastErrorSessionExpired.Raw;
}
