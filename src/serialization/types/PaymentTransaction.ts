/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Belvo from "../../api";
import * as core from "../../core";

export const PaymentTransaction: core.serialization.ObjectSchema<
    serializers.PaymentTransaction.Raw,
    Belvo.PaymentTransaction
> = core.serialization.object({
    id: core.serialization.string(),
    createdAt: core.serialization.property("created_at", core.serialization.string()),
    createdBy: core.serialization.property("created_by", core.serialization.string()),
    amount: core.serialization.string(),
    currency: core.serialization.lazy(async () => (await import("..")).EnumPaymentsCurrency),
    description: core.serialization.string(),
    transactionType: core.serialization.property(
        "transaction_type",
        core.serialization.lazy(async () => (await import("..")).EnumPaymentTransactionType)
    ),
    beneficiary: core.serialization.string(),
    payer: core.serialization.lazy(async () => (await import("..")).PaymentTransactionPayer),
    paymentIntent: core.serialization.property("payment_intent", core.serialization.string().optional()),
    customer: core.serialization.string().optional(),
});

export declare namespace PaymentTransaction {
    interface Raw {
        id: string;
        created_at: string;
        created_by: string;
        amount: string;
        currency: serializers.EnumPaymentsCurrency.Raw;
        description: string;
        transaction_type: serializers.EnumPaymentTransactionType.Raw;
        beneficiary: string;
        payer: serializers.PaymentTransactionPayer.Raw;
        payment_intent?: string | null;
        customer?: string | null;
    }
}
