/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as BelvoApi from "../../api";
import * as core from "../../core";

export const Transaction: core.serialization.ObjectSchema<serializers.Transaction.Raw, BelvoApi.Transaction> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        internalIdentification: core.serialization.property(
            "internal_identification",
            core.serialization.string().optional()
        ),
        account: core.serialization.lazyObject(async () => (await import("..")).Account),
        collectedAt: core.serialization.property("collected_at", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
        valueDate: core.serialization.property("value_date", core.serialization.string().optional()),
        accountingDate: core.serialization.property("accounting_date", core.serialization.string().optional()),
        amount: core.serialization.number().optional(),
        balance: core.serialization.number().optional(),
        currency: core.serialization.string().optional(),
        description: core.serialization.string().optional(),
        observations: core.serialization.string().optional(),
        merchant: core.serialization.lazyObject(async () => (await import("..")).TransactionMerchantData),
        category: core.serialization.lazy(async () => (await import("..")).EnumTransactionCategory),
        subcategory: core.serialization.lazy(async () => (await import("..")).EnumTransactionSubcategory).optional(),
        reference: core.serialization.string().optional(),
        type: core.serialization.lazy(async () => (await import("..")).EnumTransactionType),
        status: core.serialization.lazy(async () => (await import("..")).EnumTransactionStatus),
        creditCardData: core.serialization.property(
            "credit_card_data",
            core.serialization.lazyObject(async () => (await import("..")).TransactionCreditCardData).optional()
        ),
    });

export declare namespace Transaction {
    interface Raw {
        id?: string | null;
        internal_identification?: string | null;
        account: serializers.Account.Raw;
        collected_at?: string | null;
        created_at?: string | null;
        value_date?: string | null;
        accounting_date?: string | null;
        amount?: number | null;
        balance?: number | null;
        currency?: string | null;
        description?: string | null;
        observations?: string | null;
        merchant: serializers.TransactionMerchantData.Raw;
        category?: serializers.EnumTransactionCategory.Raw;
        subcategory?: (serializers.EnumTransactionSubcategory.Raw | undefined) | null;
        reference?: string | null;
        type?: serializers.EnumTransactionType.Raw;
        status?: serializers.EnumTransactionStatus.Raw;
        credit_card_data?: serializers.TransactionCreditCardData.Raw | null;
    }
}
